name: Go CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.24.x', '1.25.x' ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: go get -v -t -d ./...
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: coverage.txt
          flags: unittests
          name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.x'
          cache: true

      - name: Run benchmarks
        run: go test -bench=. -run=^Benchmark -benchmem ./...

  lint:
    name: Lint and Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.x'

      - name: Run gofmt
        run: |
          unformatted=$(gofmt -l .)
          if [ ! -z "$unformatted" ]; then
            echo "Unformatted files detected:"
            echo $unformatted
            exit 1
          fi

      - name: Staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest && staticcheck ./...

      - name: Vet
        run: go vet ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        go: [ '1.24.x', '1.25.x' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}

      - name: Build
        run: go build -v ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ test, lint, build ]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.x'

      - name: Run tests
        run: go test ./...

      - name: Build binaries
        run: |
          mkdir -p release
          GOOS=linux GOARCH=amd64 go build -o release/lasso-linux-amd64 ./cmd/lasso
          GOOS=darwin GOARCH=arm64 go build -o release/lasso-darwin-arm64 ./cmd/lasso
          GOOS=windows GOARCH=amd64 go build -o release/lasso-windows-amd64.exe ./cmd/lasso

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}